#!/usr/bin/env python3

import os
from graphutils import graph
from player import Player
from dotenv import load_dotenv
from itertools import groupby
from helper_functions import ls8, status_message, pluralize, handle_items
import operator
import time
from cpu import CPU

load_dotenv()
MAIN_API_KEY = os.getenv("MAIN_API_KEY")
TEST_API_KEY = os.getenv("TEST_API_KEY")
MAIN_URL = os.getenv("MAIN_URL")
TEST_URL = os.getenv("TEST_URL")

TESTING = False
API_KEY = MAIN_API_KEY if not TESTING else TEST_API_KEY
URL = MAIN_URL if not TESTING else TEST_URL


def move_to_location(player, destination):
    path = graph.bfs(player.current_room, destination)
    if not path:
        print(f"ü§î  Room {player.current_room}? You're already there!")
        return

    optimized_path = [(k, list(g))
                      for k, g in groupby(path, operator.itemgetter(0, 2))]

    # Downhill dash support
    (cur_dir, cur_elev), cur_rooms = optimized_path[0]
    cur_idx, next_idx = 0, 1
    while next_idx < len(optimized_path):
        (next_dir, next_elev), next_rooms = optimized_path[next_idx]
        if next_dir == cur_dir and next_elev < cur_elev:
            optimized_path[cur_idx][1].append(optimized_path[next_idx][1][0])
            del optimized_path[next_idx]
        else:
            (cur_dir, cur_elev), cur_rooms = optimized_path[next_idx]
            cur_idx, next_idx = next_idx, next_idx + 1

    distance = len(path)
    moves = len(optimized_path)
    print(
        f"\nüé´  ITINERARY: {distance} {pluralize('room', distance)} in {moves} {pluralize('move', moves)}")
    print("=================================")

    cur_room = player.current_room
    nice_directions = {'n': 'North', 's': 'South', 'e': 'East', 'w': 'West'}
    if TESTING:
        print(path, optimized_path)

    count = 1
    for (direction, elevation), rooms in optimized_path:
        destination = rooms[-1][1]

        print(f"{str(count).zfill(2)} ", end="", flush=True)

        if direction == "warp":
            print(
                f"‚ú®  WARPING from room {cur_room} to {destination}...", end="", flush=True)
            response = player.warp()
            status_message(response)

        elif direction == "recall":
            print(
                f"üè†  RECALLING from room {cur_room} to 0...", end="", flush=True)
            response = player.recall()
            status_message(response)

        elif len(rooms) > 1:
            next_rooms = ','.join([str(room[1]) for room in rooms])
            next_rooms_nice = ','.join([str(room[1]) for room in rooms[:-1]])
            print(
                f"üèÉ  DASHING {nice_directions[direction]} from room {cur_room} through {next_rooms_nice} to {destination}...", end="", flush=True)

            response = player.dash(direction, len(rooms), next_rooms)
            status_message(response)

        elif elevation != 0 and graph.rooms[destination]['terrain'] != 'CAVE':
            print(
                f"üßö  FLYING {nice_directions[direction]} from room {cur_room} to {destination}...", end="", flush=True)
            response = player.flight(direction)
            print(f"{status_message(response)}  Thank you for flying DreamAir!")

        else:
            print(
                f"ü•æ  MOVING {nice_directions[direction]} from room {cur_room} to {destination}...", end="", flush=True)
            response = player.wise_explorer(direction, destination)
            status_message(response)

        cur_room = destination
        count += 1

        for item in player.room_items:
            if "snitch" in item:
                print(f"üí∞  FOUND {item}! Taking it...", end="", flush=True)
                response = handle_items(player, item)
                status_message(response)
                if "errors" in response and not response["errors"]:
                    print(f"üòÑ  TOOK {item} ‚úÖ")

                cooldown = response["cooldown"]
                time.sleep(cooldown)
                if "errors" in response and response["errors"]:
                    print(response["errors"])


if __name__ == '__main__':
    player = Player()
    while True:
        print("Heading to the well!")
        move_to_location(player, 555)
        response = player.examine(treasure="Wishing Well")
        if TESTING:
            print(response)
        print("Peering into the well...")
        ROOM_NR = ls8(response['description'])
        print("Decoded the location!")

        # Move from the well to the new location
        print("Heading to the snitch!")
        move_to_location(player, ROOM_NR)
